/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clarisign.vista;

import clarisign.DB.*;
import clarisign.controlador.SesionController;
import clarisign.modelo.Sesion;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.util.List;

public class RevisarSolicitudesInterpreteView extends JFrame {

    private JComboBox<Sesion> cbSolicitudes;
    private JButton btnAceptar;
    private DashboardInterpreteView dashboard; // Referencia al dashboard

    // Constructor modificado para recibir dashboard
    public RevisarSolicitudesInterpreteView(int idInterprete, DashboardInterpreteView dashboard) {
        this.dashboard = dashboard; // Guardamos la referencia

        setTitle("Solicitudes en Revisión");
        setSize(500, 300);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new GridLayout(3, 1, 5, 5));

        cbSolicitudes = new JComboBox<>();
        btnAceptar = new JButton("Aceptar Solicitud");

        add(new JLabel("Solicitudes para revisar:"));
        add(cbSolicitudes);
        add(btnAceptar);

        btnAceptar.addActionListener(e -> aceptarSolicitud());

        cargarSolicitudes(idInterprete);
        aplicarEstilos();
        setVisible(true);
    }

    private void cargarSolicitudes(int idInterprete) {
        try (Connection conn = DBConnection.getConnection()) {
            SesionDAO dao = new SesionDAO(conn);
            List<Sesion> lista = dao.obtenerSolicitudesParaInterprete(idInterprete);
            for (Sesion s : lista) cbSolicitudes.addItem(s);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error cargando solicitudes: " + e.getMessage());
        }
    }

    private void aceptarSolicitud() {
        try {
            Sesion sesion = (Sesion) cbSolicitudes.getSelectedItem();
            if (sesion == null) return;

            sesion.setEstado("en espera");

            SesionController controller = new SesionController();
            if (controller.actualizarEstadoSesion(sesion)) {
                JOptionPane.showMessageDialog(this, "Solicitud aceptada. La sesión está en espera.");
                cbSolicitudes.removeItem(sesion);

                if (dashboard != null) {
                    dashboard.cargarSesiones(); // Actualiza el dashboard del intérprete
                }

                dispose(); // Cierra esta ventana si quieres
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo aceptar la solicitud.");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al aceptar solicitud: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aplicarEstilos() {
    Color blanco = Color.WHITE;
    Color grisClaro = new Color(245, 245, 245);
    Color moradoPastel = new Color(180, 140, 200);
    Color textoMorado = new Color(100, 60, 130);

    Font fuenteLabel = new Font("SansSerif", Font.BOLD, 13);
    Font fuenteCampo = new Font("SansSerif", Font.PLAIN, 13);
    Font fuenteBoton = new Font("SansSerif", Font.BOLD, 14);

    getContentPane().setBackground(grisClaro);

    for (Component c : getContentPane().getComponents()) {
        if (c instanceof JLabel label) {
            label.setFont(fuenteLabel);
            label.setForeground(textoMorado);
        } else if (c instanceof JComboBox<?> combo) {
            combo.setFont(fuenteCampo);
        } else if (c instanceof JButton btn) {
            btn.setFont(fuenteBoton);
            btn.setBackground(moradoPastel);
            btn.setForeground(blanco);
            btn.setFocusPainted(false);
            btn.setBorder(BorderFactory.createEmptyBorder(8, 16, 8, 16));
        }
    }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
